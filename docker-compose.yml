services:
  waf:
    build: ./waf
    container_name: waf
    restart: unless-stopped
    ports:
      - "80:8080"     # 외부 80 → 컨테이너 8080 (비루트 사용자)
    environment:
      TZ: Asia/Seoul
      BACKEND: http://web:80         # 리버스 프록시 대상 백엔드
      SERVER_NAME: waf.local
      ERRORLOG: /var/log/nginx/error.log
      
      # CRS Paranoia Level (1~4, 높을수록 엄격)
      BLOCKING_PARANOIA: "2"         # 실제 차단에 적용되는 룰 레벨
      DETECTION_PARANOIA: "2"        # 탐지만 하는 룰 레벨
      
      # Anomaly Scoring (낮을수록 엄격, 기본 5/4)
      ANOMALY_INBOUND: "5"           # 요청 스코어 임계값
      ANOMALY_OUTBOUND: "4"          # 응답 스코어 임계값
      
      # ModSecurity 엔진 설정
      MODSEC_RULE_ENGINE: "On"       # On=차단, DetectionOnly=로그만
      MODSEC_AUDIT_ENGINE: "DetectionOnly"  # 오탐 튜닝 단계용, 이후 On으로 변경
      MODSEC_AUDIT_LOG_FORMAT: "Native"
      MODSEC_DEBUG_LOG_LEVEL: "3"    # 0~9, 디버깅 시 5 이상 권장
      
    volumes:
      # 로그 수집 경로
      - ./logs/nginx:/var/log/nginx
      - ./logs/modsecurity:/var/log/modsecurity
      
      # 커스텀 룰 (CRS 전후 실행)
      - ./waf/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
      - ./waf/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
      
    # 메모리 기반 임시 파일 시스템 (성능 최적화)
    tmpfs:
      - /tmp:rw,mode=1777
      - /var/cache/nginx:rw,mode=1777
      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
    depends_on:
      - web
    networks:
      - shared_network

  web:
    image: nginx:alpine
    container_name: web
    command: sh -c "echo 'OK' > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'"
    networks:
      - shared_network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: waf-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: waf
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
    networks:
      - shared_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: waf-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - shared_network

  # Zookeeper (for Kafka)
  zookeeper:
    profiles: ["monitoring"]
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: waf-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - shared_network

  # Kafka
  kafka:
    profiles: ["monitoring"]
    image: confluentinc/cp-kafka:7.5.0
    container_name: waf-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared_network

  # Elasticsearch
  elasticsearch:
    profiles: ["monitoring"]
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: waf-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - shared_network

networks:
  shared_network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  elasticsearch-data: